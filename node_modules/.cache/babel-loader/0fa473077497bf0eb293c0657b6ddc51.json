{"ast":null,"code":"var _jsxFileName = \"C:\\\\projects\\\\Web development\\\\portfolio three.js\\\\gfolio\\\\src\\\\components\\\\allResultsCard.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport PropTypes from \"prop-types\";\nimport \"./allResultsCard.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AllResultsCard = _ref => {\n  _s();\n  let {\n    results\n  } = _ref;\n  const [filteredResults] = useState(results);\n  function formatURL(u) {\n    // Split a given url into its various parts\n    let urltext = u;\n    let url = new URL(urltext);\n    let domain = url.origin;\n    let pathname = url.pathname;\n    let paths = pathname.split('/');\n    paths = paths.filter(Boolean);\n    return [domain, paths];\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"results-content\",\n    children: filteredResults.map(item => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"result-card\",\n      children: [/*#__PURE__*/_jsxDEV(\"a\", {\n        href: `${item.link}`,\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: [`${formatURL(item.link)[0]}`, formatURL(item.link)[1].map(path => /*#__PURE__*/_jsxDEV(\"span\", {\n            children: ` › ${path}`\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 28,\n            columnNumber: 17\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 24,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n          children: `${item.name}`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 31,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 23,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"excerpt\",\n        children: `${item.excerpt}`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 20,\n    columnNumber: 5\n  }, this);\n};\n_s(AllResultsCard, \"JrelelDm2V6/peZyFd1KZdMgCAM=\");\n_c = AllResultsCard;\nAllResultsCard.propTypes = {\n  results: PropTypes.array\n};\nexport default AllResultsCard;\nvar _c;\n$RefreshReg$(_c, \"AllResultsCard\");","map":{"version":3,"names":["React","useState","PropTypes","jsxDEV","_jsxDEV","AllResultsCard","_ref","_s","results","filteredResults","formatURL","u","urltext","url","URL","domain","origin","pathname","paths","split","filter","Boolean","className","children","map","item","href","link","path","fileName","_jsxFileName","lineNumber","columnNumber","name","excerpt","_c","propTypes","array","$RefreshReg$"],"sources":["C:/projects/Web development/portfolio three.js/gfolio/src/components/allResultsCard.js"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport \"./allResultsCard.css\";\r\n\r\nconst AllResultsCard = ({ results }) => {\r\n  const [filteredResults] = useState(results);\r\n  function formatURL(u) {\r\n    // Split a given url into its various parts\r\n    let urltext = u;\r\n    let url = new URL(urltext);\r\n    let domain = url.origin\r\n    let pathname = url.pathname\r\n    let paths = pathname.split('/');\r\n    paths = paths.filter(Boolean);\r\n    return [domain, paths]\r\n  }\r\n  \r\n\r\n  return (\r\n    <div className=\"results-content\">\r\n      {filteredResults.map((item) => (\r\n        <div className=\"result-card\">\r\n          <a href={`${item.link}`}>\r\n            <p> \r\n             {/* Format URl with angle brackets between parts */}\r\n              {`${formatURL(item.link)[0]}`}  \r\n              {formatURL(item.link)[1].map((path) => (\r\n                <span>{` › ${path}`}</span>\r\n              ))  }\r\n            </p>\r\n            <h3>{`${item.name}`}</h3>\r\n          </a>\r\n          <p className=\"excerpt\">{`${item.excerpt}`}</p>\r\n        </div>\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nAllResultsCard.propTypes = {\r\n  results: PropTypes.array\r\n};\r\n\r\nexport default AllResultsCard;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAOC,SAAS,MAAM,YAAY;AAClC,OAAO,sBAAsB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE9B,MAAMC,cAAc,GAAGC,IAAA,IAAiB;EAAAC,EAAA;EAAA,IAAhB;IAAEC;EAAQ,CAAC,GAAAF,IAAA;EACjC,MAAM,CAACG,eAAe,CAAC,GAAGR,QAAQ,CAACO,OAAO,CAAC;EAC3C,SAASE,SAASA,CAACC,CAAC,EAAE;IACpB;IACA,IAAIC,OAAO,GAAGD,CAAC;IACf,IAAIE,GAAG,GAAG,IAAIC,GAAG,CAACF,OAAO,CAAC;IAC1B,IAAIG,MAAM,GAAGF,GAAG,CAACG,MAAM;IACvB,IAAIC,QAAQ,GAAGJ,GAAG,CAACI,QAAQ;IAC3B,IAAIC,KAAK,GAAGD,QAAQ,CAACE,KAAK,CAAC,GAAG,CAAC;IAC/BD,KAAK,GAAGA,KAAK,CAACE,MAAM,CAACC,OAAO,CAAC;IAC7B,OAAO,CAACN,MAAM,EAAEG,KAAK,CAAC;EACxB;EAGA,oBACEd,OAAA;IAAKkB,SAAS,EAAC,iBAAiB;IAAAC,QAAA,EAC7Bd,eAAe,CAACe,GAAG,CAAEC,IAAI,iBACxBrB,OAAA;MAAKkB,SAAS,EAAC,aAAa;MAAAC,QAAA,gBAC1BnB,OAAA;QAAGsB,IAAI,EAAE,GAAGD,IAAI,CAACE,IAAI,EAAG;QAAAJ,QAAA,gBACtBnB,OAAA;UAAAmB,QAAA,GAEG,GAAGb,SAAS,CAACe,IAAI,CAACE,IAAI,CAAC,CAAC,CAAC,CAAC,EAAE,EAC5BjB,SAAS,CAACe,IAAI,CAACE,IAAI,CAAC,CAAC,CAAC,CAAC,CAACH,GAAG,CAAEI,IAAI,iBAChCxB,OAAA;YAAAmB,QAAA,EAAO,MAAMK,IAAI;UAAE;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAO,CAC3B,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACD,CAAC,eACJ5B,OAAA;UAAAmB,QAAA,EAAK,GAAGE,IAAI,CAACQ,IAAI;QAAE;UAAAJ,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAK,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACxB,CAAC,eACJ5B,OAAA;QAAGkB,SAAS,EAAC,SAAS;QAAAC,QAAA,EAAE,GAAGE,IAAI,CAACS,OAAO;MAAE;QAAAL,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC3C,CACN;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACC,CAAC;AAEV,CAAC;AAACzB,EAAA,CAjCIF,cAAc;AAAA8B,EAAA,GAAd9B,cAAc;AAmCpBA,cAAc,CAAC+B,SAAS,GAAG;EACzB5B,OAAO,EAAEN,SAAS,CAACmC;AACrB,CAAC;AAED,eAAehC,cAAc;AAAC,IAAA8B,EAAA;AAAAG,YAAA,CAAAH,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module"}